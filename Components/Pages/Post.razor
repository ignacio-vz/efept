@page "/post/{categoria}/{id}"
@attribute [StreamRendering(true)]
@inject IPostService PostService
@inject IComentarioService ComentarioService
@inject IUsuarioService UsuarioService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;
@using efept.Entities;

<PageTitle>Esta frase es para ti</PageTitle>

@if (post != null)
{
    <div class="contenedor-post">
        <h2>@post.Titulo</h2>
        <h3>@post.Cita</h3>
        <div class="contenedor-texto-post">
            <img class="imagen-post" src="@post.Imagen" alt="@post.Titulo" />
            @post.Texto
        </div>
        <div class="contenedor-comentarios">
            <h4>Comentarios</h4>
            @if (comentarios != null && comentarios.Count > 0)
            {
                foreach (var comentario in comentarios)
                {
                    var usuario = usuarios?.FirstOrDefault(u => u.Id == comentario.IdUsuario);
                    var nombreUsuario = usuario != null ? usuario.UserName : "Usuario desconocido";

                    <div class="contenedor-comentario">
                        <h5 class="usuario-comentario">@nombreUsuario</h5>
                        <p class="texto-comentario">@comentario.Texto</p>
                    </div>
                }
            }
            <AuthorizeView>
                <Authorized Context="authContext">
                    <EditForm Model="@post" OnValidSubmit="@AgregarComentario">
                        <ChildContent Context="commentFormContext">
                            <InputText id="Texto" @bind-Value="NuevoComentario" />
                            <button type="submit">Enviar</button>
                        </ChildContent>
                    </EditForm>
                </Authorized>
                <NotAuthorized>
                    <p>Para comentar debes iniciar sesión</p>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Categoria { get; set; }
    [Parameter]
    public string? Id { get; set; }

    private efept.Entities.Post? post;
    private List<Comentario>? comentarios;
    private List<ApplicationUser>? usuarios;

    private string? NuevoComentario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        post = await PostService.GetPost(Convert.ToInt32(Id));
        if (post == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        comentarios = await ComentarioService.GetComentariosByPost(post.Id);
        usuarios = await ObtenerUsuariosDeComentarios(comentarios);
    }

    private async Task<List<ApplicationUser>> ObtenerUsuariosDeComentarios(List<Comentario> comentarios)
    {
        var idsUsuarios = comentarios.Select(c => c.IdUsuario).Distinct();
        var usuarios = new List<ApplicationUser>();
        foreach (var idUsuario in idsUsuarios)
        {
            var usuario = await UsuarioService.GetUsuario(idUsuario);
            if (usuario != null)
            {
                usuarios.Add(usuario);
            }
        }
        return usuarios;
    }

    private async Task AgregarComentario()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (NuevoComentario != null)
        {
            await ComentarioService.AddComentario(post.Id, NuevoComentario, userId);
            NuevoComentario = null;
            comentarios = await ComentarioService.GetComentariosByPost(post.Id);
            usuarios = await ObtenerUsuariosDeComentarios(comentarios);
        }
    }
}
