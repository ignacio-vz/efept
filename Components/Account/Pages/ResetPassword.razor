@page "/Account/ResetPassword"
@attribute [StreamRendering(true)]

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using efept.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Recupera tu contraseña</PageTitle>

<div class="aliceblue">
    <div class="contenedor-registro">
        <StatusMessage Message="@Message" />
        <EditForm class="contenedor-formulario-registro" Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <h1 class="titulo-registro">Recupera tu contraseña</h1>
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="contenedor-elemento-registro">
                <InputText @bind-Value="Input.Email" aria-required="true" placeholder="nombre@dominio.com" />
                <label for="email">Correo electrónico</label>
                <ValidationMessage For="() => Input.Email" />
            </div>
            <div class="contenedor-elemento-registro">
                <InputText type="password" @bind-Value="Input.Password" aria-required="true" placeholder="contraseña" />
                <label for="password">Contraseña</label>
                <ValidationMessage For="() => Input.Password" />
            </div>
            <div class="contenedor-elemento-registro">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" aria-required="true" placeholder="confirmación de contraseña" />
                <label for="confirm-password">Confirma la contraseña</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button class="boton-registro" type="submit">Cambiar contraseña</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "La contraseña debe tener entre 6 y 100 caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "La contraseña y su confirmación no coinciden.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
