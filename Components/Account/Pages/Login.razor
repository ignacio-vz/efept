@page "/Account/Login"
@attribute [StreamRendering(true)]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using efept.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar sesión</PageTitle>

<div class="aliceblue">
    <div class="contenedor-registro error-login">
        <StatusMessage Message="@errorMessage" />
        <EditForm class="contenedor-formulario-registro" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h1 class="titulo-registro">Iniciar sesión</h1>
            <div class="contenedor-elemento-registro">
                <InputText @bind-Value="Input.Email" aria-required="true" placeholder="nombre@dominio.com" />
                <label for="email" class="form-label">Correo electrónico</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="contenedor-elemento-registro">
                <InputText type="password" @bind-Value="Input.Password" aria-required="true" placeholder="contraseña" />
                <label for="password" class="form-label">Contraseña</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button class="boton-registro" type="submit">Iniciar sesión</button>
            <div class="opciones-login">
                <a href="Account/ForgotPassword">¿Has olvidado la contraseña?</a>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registra un nuevo usuario</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, isPersistent: false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Las credenciales de acceso son incorrectas.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Es obligatorio introducir un correo electrónico")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Es obligatorio introducir una contraseña")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
