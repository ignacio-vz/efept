@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="contenedor-logo">
    <NavLink href="/" target="_self" @onclick="CerrarMenu">
        <img src="images/logo_blanco.webp" alt="logo" loading="eager">
    </NavLink>
</div>
<button @onclick="ToggleMenu" id="hamburger-menu" class="hamburger-menu">☰</button>
<div class="contenedor-navbar-ul">
    <ul class="navbar-ul-desktop">
        <NavLink href="/blog" target="_self" class="enlaces-navbar-desktop">
            <li>Este blog</li>
        </NavLink>
        <NavLink href="/sobre-mi" target="_self" class="enlaces-navbar-desktop">
            <li>Sobre mí</li>
        </NavLink>
        <NavLink href="/contacto" target="_self" class="enlaces-navbar-desktop">
            <li>Contacto</li>
        </NavLink>
        <NavLink href="/recursos" target="_self" class="enlaces-navbar-desktop">
            <li>Recursos</li>
        </NavLink>
        <AuthorizeView>
            <Authorized>
                <NavLink href="/perfil" target="_self" class="enlaces-navbar-desktop">
                    <li>@context.User.Identity?.Name</li>
                </NavLink>
                <form method="post" action="Account/Logout" class="enlaces-navbar-desktop">
                    <AntiforgeryToken />
                    <input type="hidden" name="returnUrl" value="" />
                    <button class="boton-cerrar-sesion" type="submit">Cerrar sesión</button>
                </form>
            </Authorized>
            <NotAuthorized>
                <NavLink href="/Account/Register" target="_self" class="enlaces-navbar-desktop">
                    <li>Registro</li>
                </NavLink>
                <NavLink href="/Account/Login" target="_self" class="enlaces-navbar-desktop">
                    <li>Login</li>
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
        
    </ul>
    <ul class="navbar-ul-mobile" style="@EstiloMenu">
        <NavLink href="/blog" target="_self" @onclick="ToggleMenu">
            <li>Este blog</li>
        </NavLink>
        <NavLink href="/sobre-mi" target="_self" @onclick="ToggleMenu">
            <li>Sobre mí</li>
        </NavLink>
        <NavLink href="/contacto" target="_self" @onclick="ToggleMenu">
            <li>Contacto</li>
        </NavLink>
        <NavLink href="/recursos" target="_self" @onclick="ToggleMenu">
            <li>Recursos</li>
        </NavLink>
        <AuthorizeView>
            <Authorized>
                <NavLink href="/perfil" target="_self" @onclick="ToggleMenu">
                    <li>@context.User.Identity?.Name</li>
                </NavLink>
                <form method="post" action="Account/Logout">
                    <AntiforgeryToken />
                    <input type="hidden" name="returnUrl" value="" />
                    <button class="boton-cerrar-sesion" type="submit" @onclick="ToggleMenu">Cerrar sesión</button>
                </form>
            </Authorized>
            <NotAuthorized>
                <NavLink href="/Account/Register" target="_self" @onclick="ToggleMenu">
                    <li>Registro</li>
                </NavLink>
                <NavLink href="/Account/Login" target="_self" @onclick="ToggleMenu">
                    <li>Login</li>
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</div>


@code {
    private string? currentUrl;
    private bool MenuVisible = false;
    private string EstiloMenu => MenuVisible ? "display: flex;" : "display: none;";

    private void ToggleMenu()
    {
        MenuVisible = !MenuVisible;
    }

    private void CerrarMenu()
    {
        if (MenuVisible)
        {
            MenuVisible = false;
        }
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}